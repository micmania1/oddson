// tslint:disable
/**
 * Odds on
 * Api endpoints for http://oddson.dev/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActivateChallengeRequest
 */
export interface ActivateChallengeRequest {
    /**
     * 
     * @type {number}
     * @memberof ActivateChallengeRequest
     */
    odds: number;
    /**
     * 
     * @type {number}
     * @memberof ActivateChallengeRequest
     */
    number: number;
}
/**
 * 
 * @export
 * @interface Challenge
 */
export interface Challenge {
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    challenge: string;
    /**
     * 
     * @type {number}
     * @memberof Challenge
     */
    odds: number;
    /**
     * 
     * @type {Person}
     * @memberof Challenge
     */
    challenger: Person;
    /**
     * 
     * @type {Person}
     * @memberof Challenge
     */
    victim: Person;
    /**
     * 
     * @type {string}
     * @memberof Challenge
     */
    status: ChallengeStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ChallengeStatusEnum {
    New = 'new',
    Activated = 'activated',
    Complete = 'complete'
}

/**
 * 
 * @export
 * @interface ChallengeResponse
 */
export interface ChallengeResponse extends Challenge {
}


/**
 * 
 * @export
 * @interface CheckResponse
 */
export interface CheckResponse extends Challenge {
}


/**
 * 
 * @export
 * @interface CompleteChallengeRequest
 */
export interface CompleteChallengeRequest {
    /**
     * 
     * @type {number}
     * @memberof CompleteChallengeRequest
     */
    number: number;
}
/**
 * 
 * @export
 * @interface CompleteChallengeResponse
 */
export interface CompleteChallengeResponse extends Challenge {
}


/**
 * 
 * @export
 * @interface CreateChallengeRequest
 */
export interface CreateChallengeRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequest
     */
    challenger: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequest
     */
    victim: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChallengeRequest
     */
    challenge: string;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    number?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Victim activates the challenge by entering their odds
         * @param {string} id challenge id
         * @param {ActivateChallengeRequest} [activateChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateChallenge: async (id: string, activateChallengeRequest?: ActivateChallengeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activateChallenge.');
            }
            const localVarPath = `/activate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof activateChallengeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(activateChallengeRequest !== undefined ? activateChallengeRequest : {}) : (activateChallengeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateIdOptions: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling activateIdOptions.');
            }
            const localVarPath = `/activate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check the status of an existing challenge
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkChallenge: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkChallenge.');
            }
            const localVarPath = `/check/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIdOptions: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkIdOptions.');
            }
            const localVarPath = `/check/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete the challenge by guessing the victim\'s odds
         * @param {string} id challenge id
         * @param {CompleteChallengeRequest} [completeChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeChallenge: async (id: string, completeChallengeRequest?: CompleteChallengeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling completeChallenge.');
            }
            const localVarPath = `/complete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof completeChallengeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(completeChallengeRequest !== undefined ? completeChallengeRequest : {}) : (completeChallengeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeIdOptions: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling completeIdOptions.');
            }
            const localVarPath = `/complete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {CreateChallengeRequest} [createChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChallenge: async (createChallengeRequest?: CreateChallengeRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/new`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createChallengeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createChallengeRequest !== undefined ? createChallengeRequest : {}) : (createChallengeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newOptions: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/new`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Victim activates the challenge by entering their odds
         * @param {string} id challenge id
         * @param {ActivateChallengeRequest} [activateChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateChallenge(id: string, activateChallengeRequest?: ActivateChallengeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChallengeResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).activateChallenge(id, activateChallengeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateIdOptions(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).activateIdOptions(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check the status of an existing challenge
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkChallenge(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkChallenge(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIdOptions(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkIdOptions(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Complete the challenge by guessing the victim\'s odds
         * @param {string} id challenge id
         * @param {CompleteChallengeRequest} [completeChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeChallenge(id: string, completeChallengeRequest?: CompleteChallengeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteChallengeResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).completeChallenge(id, completeChallengeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeIdOptions(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).completeIdOptions(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {CreateChallengeRequest} [createChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChallenge(createChallengeRequest?: CreateChallengeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Challenge>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createChallenge(createChallengeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newOptions(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).newOptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rootGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Victim activates the challenge by entering their odds
         * @param {string} id challenge id
         * @param {ActivateChallengeRequest} [activateChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateChallenge(id: string, activateChallengeRequest?: ActivateChallengeRequest, options?: any): AxiosPromise<ChallengeResponse> {
            return DefaultApiFp(configuration).activateChallenge(id, activateChallengeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateIdOptions(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).activateIdOptions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check the status of an existing challenge
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkChallenge(id: string, options?: any): AxiosPromise<CheckResponse> {
            return DefaultApiFp(configuration).checkChallenge(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIdOptions(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).checkIdOptions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete the challenge by guessing the victim\'s odds
         * @param {string} id challenge id
         * @param {CompleteChallengeRequest} [completeChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeChallenge(id: string, completeChallengeRequest?: CompleteChallengeRequest, options?: any): AxiosPromise<CompleteChallengeResponse> {
            return DefaultApiFp(configuration).completeChallenge(id, completeChallengeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id challenge id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeIdOptions(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).completeIdOptions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new challenge
         * @param {CreateChallengeRequest} [createChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChallenge(createChallengeRequest?: CreateChallengeRequest, options?: any): AxiosPromise<Challenge> {
            return DefaultApiFp(configuration).createChallenge(createChallengeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newOptions(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).newOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Victim activates the challenge by entering their odds
     * @param {string} id challenge id
     * @param {ActivateChallengeRequest} [activateChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public activateChallenge(id: string, activateChallengeRequest?: ActivateChallengeRequest, options?: any) {
        return DefaultApiFp(this.configuration).activateChallenge(id, activateChallengeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id challenge id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public activateIdOptions(id: string, options?: any) {
        return DefaultApiFp(this.configuration).activateIdOptions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check the status of an existing challenge
     * @param {string} id challenge id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkChallenge(id: string, options?: any) {
        return DefaultApiFp(this.configuration).checkChallenge(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id challenge id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkIdOptions(id: string, options?: any) {
        return DefaultApiFp(this.configuration).checkIdOptions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete the challenge by guessing the victim\'s odds
     * @param {string} id challenge id
     * @param {CompleteChallengeRequest} [completeChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public completeChallenge(id: string, completeChallengeRequest?: CompleteChallengeRequest, options?: any) {
        return DefaultApiFp(this.configuration).completeChallenge(id, completeChallengeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id challenge id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public completeIdOptions(id: string, options?: any) {
        return DefaultApiFp(this.configuration).completeIdOptions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new challenge
     * @param {CreateChallengeRequest} [createChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createChallenge(createChallengeRequest?: CreateChallengeRequest, options?: any) {
        return DefaultApiFp(this.configuration).createChallenge(createChallengeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newOptions(options?: any) {
        return DefaultApiFp(this.configuration).newOptions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: any) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

}


